<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>parSolid</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Basic variables

event_inherited();
image_speed    = 0;
dir            = "s";
act            = 0;
act_alpha      = 0;
quest_state    = quest_ready;
turn_to_player = 1;
turn_timer     = -1;
turn           = 0;
last_dir       = dir;
status         = 0;
talking        = 0;
provadena_akce = "";
goapX          = x;
goapY          = y;
goapS          = 0;
goapRunning    = 1;
mood           = "walk";
stack          = 0;
listX          = ds_list_create();
listY          = ds_list_create();
listS          = ds_list_create();
queue          = 1;
mood           = "";
spd            = 0;
tempSpd        = 0;
idleImage      = image_index;
isBusy         = false;
isShop         = false;
shopActive     = false;
open           = false;
action_id      = -1;
substatus      = 0;

splashMessage           = false;
splashMessageTime       = -1;    
splashMessageAlpha      = 0;
splashMessageAlphaSpeed = 0.1;

speechQueue = ds_queue_create();
speechAlpha = 0;
speechIn    = false;
speechCurrentText = "";
speechMode  = 0;
speechSkip = false;

akce = ds_priority_create();
mp_potential_settings(30,30,10,0);
//ds_priority_add(akce,"","stackoverflow");
alarm[0] = 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_priority_destroy(akce);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Standard draw

draw_self();


if (mood != "cutscene")
{
if (!shopActive)
{
if (turn_to_player) 
   {
   if (turn_timer &gt; 0) {turn_timer--;} 
   else 
   {
   if (turn_timer = 0) 
      {
      dir = last_dir;
      switch(dir) 
                  {
                   case "w": {image_index = 0 dir="s"; break;};   //12
                   case "s": {image_index = 12 dir="w"; break;};   //
                   case "a": {image_index = 8 dir="d"; break;};
                   case "d": {image_index = 4  dir="a"; break;};

                  }
      turn_timer = -1;
      turn = 1;
      }
   
   }
   
   
   }

if (instance_number(oPlayer) &gt; 0)
   {
    

   
    if (distance_to_object(oPlayer) &lt; 64)
       {
       if (turn_to_player)
          {
          
              if (oPlayer.x &gt; x - 16 &amp;&amp; oPlayer.x &lt; x+sprite_get_width(sprite_index)-16 &amp;&amp; oPlayer.y &gt; y-sprite_get_height(sprite_index)-24 &amp;&amp; oPlayer.y &lt; y-24)
               {
               //if (turn_timer = -1 &amp;&amp; dir != "w") {last_dir = dir; turn_timer = irandom_range(15,30); }
                    dir = "w";
               image_index = 12;

               }
              else  if (oPlayer.x &gt; x-16 &amp;&amp; oPlayer.x &lt; x+sprite_get_width(sprite_index)-16 &amp;&amp; oPlayer.y &gt; y+sprite_get_height(sprite_index)-24 &amp;&amp; oPlayer.y &lt; y+sprite_get_height(sprite_index)+48-24)
               {
               //if (turn_timer = -1 &amp;&amp; dir != "s") {last_dir = dir; turn_timer = irandom_range(15,30); }
                dir = "s";
               image_index = 0;

               }
                else  if (oPlayer.x &gt; x-32-16 &amp;&amp; oPlayer.x &lt; x-16 &amp;&amp; oPlayer.y &gt;= y-24 &amp;&amp; oPlayer.y &lt;= y+48-24)
               {
               //if (turn_timer = -1 &amp;&amp; dir != "a") {last_dir = dir; turn_timer = irandom_range(15,30); }
               dir = "a";
               image_index = 4;
               }
              else  if (oPlayer.x &gt; x+32-16 &amp;&amp; oPlayer.x &lt; x+64-16 &amp;&amp; oPlayer.y &gt;= y-24 &amp;&amp; oPlayer.y &lt;= y+48-24)
               {
               //if (turn_timer = -1 &amp;&amp; dir != "d") {last_dir = dir; turn_timer = irandom_range(15,30); }
                 dir = "d";
               image_index = 8;

               }

              else               
              {
              dir = last_dir;
                 switch(dir) 
                  {
                   case "w": {image_index = 12 dir="s"; break;};   //12
                   case "s": {image_index = 0 dir="w";  break;};   //
                   case "a": {image_index = 4 dir="a"; break;};
                   case "d": {image_index = 8 dir="d"; break;};

                  }
              }
          }

       
        if (dir = "s")
           {
            if (oPlayer.x &gt; x - 16&amp;&amp; oPlayer.x &lt; x+sprite_get_width(sprite_index)-16 &amp;&amp; oPlayer.y &gt; y+sprite_get_height(sprite_index)-24 &amp;&amp; oPlayer.y &lt; y+sprite_get_height(sprite_index)+48-24 &amp;&amp; oPlayer.last_dir = "w")
               {
                if (act_alpha &lt; 1) {act_alpha += 0.1;}                
               } 
               else {if (act_alpha &gt; 0) {act_alpha -= 0.1;}}
           }
        else if (dir = "w")
           {
            if (oPlayer.x &gt; x-16 &amp;&amp; oPlayer.x &lt; x+sprite_get_width(sprite_index)-16 &amp;&amp; oPlayer.y &gt; y-sprite_get_height(sprite_index)-24 &amp;&amp; oPlayer.y &lt; y-24 &amp;&amp; oPlayer.last_dir = "s")
               {
                if (act_alpha &lt; 1) {act_alpha += 0.1;}
                
               } 
               else {if (act_alpha &gt; 0) {act_alpha -= 0.1;}}
           }
          else if (dir = "a")
           {
            if (oPlayer.x &gt; x-32-16 &amp;&amp; oPlayer.x &lt; x-16 &amp;&amp; oPlayer.y &gt;= y-24 &amp;&amp; oPlayer.y &lt;= y+48-24 &amp;&amp; oPlayer.last_dir = "d")
               {
                if (act_alpha &lt; 1) {act_alpha += 0.1;}
                
               } 
               else {if (act_alpha &gt; 0) {act_alpha -= 0.1;}}
           }
        else if (dir = "d")
           {
            if (oPlayer.x &gt; x+32-16 &amp;&amp; oPlayer.x &lt; x+64-16 &amp;&amp; oPlayer.y &gt;= y-24 &amp;&amp; oPlayer.y &lt;= y+48-24 &amp;&amp; oPlayer.last_dir = "a")
               {
                if (act_alpha &lt; 1) {act_alpha += 0.1;}
                
               } 
               else {if (act_alpha &gt; 0) {act_alpha -= 0.1;}}
           }

       
         if (quest_state != quest_noone) { draw_sprite_ext(sQuest,quest_state+1,x+16-16,y-12-act_alpha*5-24,1,1,0,c_white,act_alpha);}
        
       }
   
     if (keyboard_check_pressed(ord("E")) &amp;&amp; act_alpha &gt;= 1 &amp;&amp; !talking)
        {
           event_user(15);
           
           // Make player face the NPC
           if (dir == "a") {oPlayer.image_index = 18;}
           if (dir == "d") {oPlayer.image_index = 6;}
           if (dir == "w") {oPlayer.image_index = 12;}
           if (dir == "s") {oPlayer.image_index = 0;}           
        }
   }
 }
 else
    {
     if (shopActive) {scrShopDraw();}
    }
}
else
{
scrNpcGetImageIndex(dir, idleImage, 0.1);
draw_text(x + 48, y, dir);

if (timeline_running &amp;&amp; (timeline_position &gt;= (timeline_max_moment(timeline_index))))
    {
     timeline_running = false
     spd = tempSpd;
     timeline_position = 0;
    }
if (timeline_running)
    {
     draw_text(x, y - 32, "Cutscene"); // Debug
    }
else 
    {
     //if (image_alpha &gt; 0) {image_alpha -= 0.05;} else {instance_destroy();}
     mood = "idle";
     speed = 0;
     timeline_running = false;
     timeline_index = -1;
     spd = 0;
     speed = 0;
    }
    
if (mood == "cutscene" &amp;&amp; distance_to_point(real(cutsceneX), real(cutsceneY)) &gt; 1)
{
move_towards_point(real(cutsceneX), real(cutsceneY), real(spd));

//if (floor(x) &gt; floor(xprevious)) {dir = "d"; show_message("");}
//if (floor(x) &lt; floor(xprevious)) {dir = "a";}
//if (floor(y) &lt; floor(yprevious)) {dir = "w";}
//if (floor(y) &gt; floor(yprevious)) {dir = "s";}
}
else if (mood == "cutscene" &amp;&amp; distance_to_point(real(cutsceneX), real(cutsceneY)) &lt; real(spd))
    {
   //  mood = "idle";
  //   spd = 0;
   //  speed = 0;
    }
}

// Handle speech queue
if (ds_queue_size(speechQueue) &gt; 0)
    {
     if (!speechIn)
        {
         speechCurrentText = ds_queue_dequeue(speechQueue);
         speechIn = true;         
        }
    }
    
if (speechIn)
    {
     if (speechMode == 0) {speechAlpha = lerp(speechAlpha, 1.1, 0.1); if (speechAlpha &gt;= 1) {speechMode = 1; speechTimer = 40;}}
     if (speechMode == 1) {speechTimer--; if (speechTimer &lt;= 0) {speechMode = 2;}}
     if (speechMode == 2) {speechAlpha = lerp(speechAlpha, -0.1, 0.1); if (speechAlpha &lt;= 0) {speechMode = 0; speechIn = false; speechTimer = 100;}}
     
     fnt();
     clr (c_black, speechAlpha / 2);
     draw_roundrect_colour_ext(x - string_width(speechCurrentText) / 2 - 10,y - 48,x + string_width(speechCurrentText) / 2+10,y+string_height(speechCurrentText)+2-48,20,20,c_black,c_black,0);
     clr(c_white, speechAlpha);
     draw_text(x - string_width(speechCurrentText) / 2, y - 48, speechCurrentText);
     clr();
     
     if (speechSkip)
        {
         if (ds_queue_size(speechQueue) &gt; 0) {speechSkip = false; speechIn = false;}
        }
     }

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
